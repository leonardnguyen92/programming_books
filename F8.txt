cài đặt môi trường:
- trình duyệt chrome
- Visual Studio Code + Live server extension
Cộng đồng F8 trên Discord:
https://discord.com/invite/sCdvr5MufX

Sử dụng JavaScript với HTML
- Tạo thư mục gồm có 1 file index.html và main.js
- Cách Internal (sử dụng nội bộ)
Đặt trực tiếp thẻ script vào mã HTML
 <body>
  ...
  <script>
        alert('Xin chào các bạn!')
  </script>
  ...
 </body>
- Cách External (sử dụng file .js bên ngoài)
Các bạn sẽ thường thấy cách này được sử dụng vì mã javascript được viết riêng biệt ra một file .js ở bên ngoài. Mã của chúng ta sẽ gọn gàng, dễ nhìn, dễ chỉnh sửa hơn vì không bị viết lẫn lộn voà HTML nhữ cách Internal.
 <body>
  ...
  <script src="đường_dẫn_tới_file.js"></script>
 <body>
Trong trường hợp sử dụng file .js thì nội dung của file không được chứa thẻ <script>. Sau đây là ví dụ nội dung file .js
	//Nội dung file .js
	alert('Xin chào các bạn!');
Trong thực tế cách Internal cũng được sử dụng khá phổ biến trong các trường hợp mã javascript đó chỉ sử dụng tại duy nhất một màn hình và số lượng các dòng code không nhiều. Tuy nhiên cách này các bạn nên tránh việc lạm dụng vì sẽ dễ gây rác source code và lặp lại code không mong muốn.

KHAI NIỆM BIẾN VÀ CÁCH SỬ DỤNG
Biến là gì?
- Trong quá trình xây dựng website hoặc các ứng dụng với Javascript chúng ta sẽ cần phải làm việc với các dạng thông tin dữ liệu khác nhau. Ví dụ:
 + Phần mềm kế toán - Chúng ta sẽ làm việc với những con số
 + Website bán hàng - Làm việc với dữ liệu thông tin sản phẩm, đơn hàng và giỏ hàng
 + Ứng dụng Chat - Dữ liệu là những đoạn chat, tin nhắn, thông tin người chat
- Biến được sử dụng để lưu trữ các thông tin trên trong quá trình ứng dụng Javascript hoạt động.
Khai báo biến
- Để khai báo biến ta sẽ bắt đầu bằng từ khoá var (var viết tắt của từ variable - nghĩa là biến). Khai báo biến có cú pháp như sau:
	var [dấu cách] [tên biến];
- Theo cú pháp trên, mình sẽ định nghĩa một biến có tên fullName với dự định để lưu tên đầy đủ của mình vào đó.
	var fullName;
- Tiếp theo, ta có thể lưu thông tin vào biến fullName này:
	var fullName; // khai báo biến
	fullName = 'Nguyễn Hoàn'; // gán giá trị
- Các bạn chú ý có dấu nháy đơn '' bao ngoài chữ Nguyễn Hoàn. Đó là cách để thể hiện dữ liệu dạng chuỗi (văn bản) trong Javascript.
{* Khi đoạn mã trên được chạy (thực thi) Javascript sẽ tạo biến với tên fullName và gán giá trị 'Nguyễn Hoàn' cho biến này. Một vùng nhớ trong RAM của máy tính sẽ được sử dụng để phục vụ việc lưu trữ những giá trị của biến khi chương trình được thực thi *}
- Chuỗi 'Nguyễn Hoàn' đã được lưu vào vùng nhớ tương ứng với biến fullName. Ta có thể truy cập tới chuỗi này qua tên biến:
	var fullName;
	fullName = 'Nguyễn Hoàn';
	alert(fullName); // hiển thị giá trị của biến
- Để đơn giản và ngắn gọn, ta có thể kết hợp việc khai báo biến và gán giá trị cho biến thành một dòng:
	var fullName = 'Nguyễn Hoàn'; // khai báo và gán giá trị
	alert(fullName);
- Ta cũng có thể khai báo nhiều biến trong cùng một dòng cách nhau bởi dấu , như sau:
	var fullName = 'Nguyễn Hoàn', age = 18, workAt = 'DEV';
- Trông có vẻ ngắn gọn, tuy nhiên các bạn không nên dùng cách này. Khi cần khai báo nhiều biến hơn thì cách này trở nên rất khó đọc. 
- Ta nên khai báo biến trên mỗi dòng khác nhau để dễ đọc hơn (nên dùng cách này):
	var fullName = 'Nguyễn Hoàn';
	var age = 18;
	var workAt = 'DEV';
- Một số cách khai báo biến trên nhiều dòng khác như sau:
	var fullName = 'Nguyễn Hoàn',
		age = 18,
		workAt = 'DEV';
- Thậm chí có cả phong cách sau:
	var fullName = 'Nguyễn Hoàn'
		, age = 18
		, workAt = 'DEV';
- Về mặt kỹ thuật thì tất cả các cách đều tương tự nhau. Vì vậy dùng cách nào là tuỳ theo sở thích của bạn.
{* Khi gán giá trị dạng số cho biến chúng ta không sử dụng dấu nháy đơn '' bao bọc bên ngoài. Như ví dụ trên thì age = 18 ta sẽ viết luôn số 18 và không sử dụng dấu nháy. *}
Quy tắc đặt tên
1. Tên biến có thể bao gồm chữ cái, số, dấu gạch dưới (_) và kí tự đô la ($).
2. Tên biến không thể bắt đầu bằng số, phải bắt đầu bằng một chữ cái hoặc dấu gạch dưới hoặc dấu đô la.
3. Tên biến phân biệt chữ hoa và chữ thường. Vì vậy tenbien và TenBien là 2 biến khác nhau.
4. Tên biến không được (không thể) đặt trùng với các từ khoá của Javascript.
{*Từ khoá là những từ được Javascript sử dụng để tạo nên những quy chuẩn về mặt chức năng và cú pháp trong Javascript. Ví dụ: Để khai báo một biến ta sẽ sử dụng từ khoá var. Vì vậy ta không thể đặt tên biến là "var" *}
- Ví dụ cho tên biến hợp lệ
	var address; // tên biến sử dụng chữ cái
	var first_name; // kết hợp chữ cái và gạch dưới
	var $last_name; // dấu đô la, gạch dưới và chữ cái
	var dev5; // chữ cái và số, số đúng sau chữ cái
- Ví dụ cho tên biến không hợp lệ
	var java-script; // bao gồm dấu gạch ngang
	var 5dev; //bắt đầu với chữ số
	var var = 'Biến'; //sử dụng trùng từ khoá 'var'
- Các chữ cái không phải tiếng Lating vẫn có thể được sử dụng làm tên biến (không nên sử dụng cách này):
	var ດ້ານວິຊາການ = '...'; // tiếng Pháp
	var ਤਕਨੀਕੀ = '...'; // tiếng Lào
{*Trong thực tế chúng ta sẽ sử dụng tiếng Anh để đặt tên biến vì đó là quy ước chung Quốc tế*}
Gán giá trị cho biến
- Các bạn hãy tưởng tượng biến như một chiếc hộp và giá trị gán cho biến như là đồ vật được bỏ vào hộp. Vì vậy ta có thể đặt bất cứ giá trị gì vào hộp và ta cũng có thể thay thế chúng nếu muốn:
	var fullName; // tạo chiếc hộp
	fullName = 'Nguyễn Hoàn'; // cho đồ vật vào hộp
	fullName = 'Nguyễn Văn A'; // thay thế đồ vật khác
	alert(fullName); // Nguyễn Văn A
{*Khi giá trị của biến được thay đổi, giá trị cũ sẽ bị xoá khỏi biến.*}
- Ta cũng có thể sao chép giá trị từ biến này sang biến khác:
	var currentCourse = 'Javascript';
	var newCourse;
	// copy giá trị 'Javascript' từ biến
	// 'currentCourse' sang biến 'newCourse'
	newCourse = currentCourse;
	
	// bây giờ, biến 'newCourse' và 'currentCourse'
	// đều có giá trị là 'Javascript'
	
	alert(currentCourse); // Javascript
	alert(newCourse); // Javascript
{*Có thể bạn chưa biết có những ngôn ngữ lập trình như Scala, Erlang không cho phép thay đổi giá trị của biến đã định nghĩa. Ta bắt buộc phải tạo biến mới khi cần lưu giá trị và không thể gán lại giá trị cho biến cũ.*}
Đặt tên biến như thế nào cho đúng?
- Đặt tên biến hợp lệ theo quy tắc của Javascript là việc đơn giản, tuy nhiên trong thực tế đặt tên biến không chỉ dừng lại ở việc đặt cho hợp lệ mà ta còn phải quan tâm tới
các yếu tố khác như:
 1. Tên biến phải có ý nghĩa cụ thể, phải rõ ràng và thể hiện được nó đang lưu trữ cái gì.
 2. Sử dụng tiếng Anh để đặt tên biến, sử dụng các từ có thể đọc lên được như userName, phoneNumber, verifyEmail, ...
 3. Tráng đặt tên biến ngắn như a, b, p trừ khi bạn chỉ đang làm ví dụ hoặc bạn thật sự hiểu trường hợp đó có thể đặt tên như vậy.
 4. Tránh đặt tên biến chung chung kiểu như data, value. Vì khi nhìn vào không thể hiểu data là data của cái gì, value là value của cái gì. Chỉ sử dụng tên dạng
    này khi đang trong ngữ cảnh cụ thể giúp bổ nghĩa cho những từ chung chung đó.
- Đặt tên biến chung chung (trường hợp nên tránh)
 + Ví dụ:
	var data = '...'; // không biết data là data của cái gì
	var value = '...'; // không biết value là value của cái gì

	// var documentData = '...'; Nên đặt tên rõ ràng ra như này
	// var documentValue = '...'; và như này
- Đặt tên biến chung chung (trường hợp nên dùng)
 + Ví dụ:
	function Document() {
		var data = '...';
		// hoặc
		var value = '...';

		// var documentValue = '...'; Đặt như này sẽ bị lặp lại chữ "document' không cần thiết
	}
 + Bạn chưa cần quan tâm function là gì vì ta sẽ tìm hiểu nó ở những bài viết sau. Trong trường hợp này biến data và value nằm trong Document. Vì vậy Document đã
giúp lập trình viên khi nhìn vào hiểu được data, value là thuộc về Document. Trong trường hợp này thì tên biến giúp đơn giản hoá và vẫn truyền đạt được đầy đủ ý
nghĩa.
Có thể bạn chưa biết
1. Đặt tên biến là một trong những kỹ năng quan trọng và phức tạp nhất trong lập trình. Nhìn lướt qua các tên biến có thể biết code nào được viết bở người mới và người
đã có nhiều kinh nghiệm.
2. Trong thực tế nhiều khi chúng ta phải làm việc trên code đã có sẵn thay vì viết hoàn toàn mới. Có khi bạn sẽ làm việc trên code cũ của người khác và ngược lại. Vì vậy
đặt tên biến rõ ràng, dễ hiểu, truyền đạt đúng mục đích sử dụng là quan trọng hơn cả.
3. Chỉ sau vài tháng bạn có thể quên đi đoạn mã do chính tay mình viết. Để chính bạn hiểu bạn đã từng code cái gì trong quá khứ thì việc đặt tên biến tuân thủ các
nguyên tắc trên là vô cùng quan trọng.
4. Khi phải lựa chọn giữa performance (hiệu năng) và clean code (code sạch) người ta thường chọn clean code. Việc đánh đổi này là cần thiết để giúp code dễ
hiểu, dễ bảo trì và nâng cấp về sau. Và đặt tên biến chính là một trong những yếu tố giúp code của bạn trở nên clear hơn.
{*Fact: Code cho máy hiểu thì dễ, code cho người hiểu mới khó!*}

CÚ PHÁP COMMENTS LÀ GÌ?
/**
* Tóm tắt nội dung:
* Comments trong JS
* 
* 1. Mục đích sử dụng:
* - Ghi chú
* - Vô hiệu hoá mã 
*
* 2. Loại comments
* - Comment 1 dòng
* - Comment nhiều dòng
*
* 3. Sử dụng phím tắt
* - Windows: Ctrl + /
* - Ubuntu: 
* - MacOS: Command + /
*/
Giới thiệu
Hầu hết các ngôn ngữ lập trình đều có cú pháp dành cho việc comment code. Trình biên dịch sẽ bỏ qua những dòng và khối comment trong code của bạn. Vì vậy comment 
mang mục đích để lập trình viên có thể chú thích code mà không ảnh hưởng tới việc thực thi ngôn ngữ lập trình.
Cú pháp
- Comment trên một dòng
 + Chúng ta sẽ sử dụng 2 dấu gạch chéo // trước comment. Cú pháp như sau:
	// [Nội dung comment]
 + Áp dụng:
	// Hàm alert sẽ bật lên hộp thoại
	// trên trình duyệt
	alert('Học lập trình tại DEV.MyBlog');
 + Hoặc sử dụng ở phía sau dòng code:
	var userName = 'dev'; // Gán 'dev' cho userName
- Comment nhiều dòng - một khối:
 + Cú pháp:
	/* [Nội dung comment] */

	// hoặc
	
	/*
	[Nội dung comment]
	*/
 + Áp dụng:
	/**
	Ở bài trước chúng ta đã học về biến
	Và hôm nay chúng ta sẽ học về comment
	*/
	
	var fullName;
	var age;
{*Bất cứ nội dung gì nằm giữa ký tự /* và */ sẽ là comment*}
Sử dụng khi nào?
- Chúng ta sử dụng comment với 2 mục đích chính:
 + Mục đích chú thích code
  Chúng ta sẽ chú thích trên các đoạn code để hướng dẫn cách sử dụng, mô tả cách hoạt đọng hoặc giải thích tại sao ta lại làm như vậy. Việc làm này thường áp dụng đối với 
những đoạn code phực tạp, với những code đơn giản thì không cần sử dụng comment. Hãy áp dụng nguyên tắc đặt tên biến đã học để code của bạn viết ra sẽ tự giải thích 
luôn ý nghĩa của chính nó.
  Đây là ví dụ cho việc comment để mô tả cách sử dụng:
	/*
	Example:
	
	var checked = true;
	
	<Checkbox
		checkked={checked}
		onChange={event => doSomething(event.target.checked}
	>
	 Label for Box
	</Checkbox>
	*/

	function Checkbox() {
		...
	}
{*Việc lạm dụng comment, sử dụng không đúng lúc, không đúng chỗ sẽ gây dư thừa không cần thiết, làm mã của bạn trở nên khó nhìn và gây phản tác dụng. Vì vậy 
hãy cân nhắc sự cần thiết mỗi khi có ý định sử dụng comment trong mã của bạn.*}
  Ví dụ dưới đây mô tả việc sử dụng comment chưa hiệu quả:
	// Khai báo biến
	var email;
	var password;

	// Lấy giá trị người dùng nhập vào email input
	email = event.target.value;

	// Lấy giá trị người dùng nhập vào password input
	password = event.target.value;
  Comment như trên trở nên dư thừa không cần thiết vì đã là lập trình viên Javascript thì ai cũng sẽ hiểu đoạn code như vậy để làm gì.
{*Ngoại lệ khi bạn là người mới học, việc sử dụng comment như trên là cần thiết để giúp bạn ghi nhớ chức năng, nhiệm vụ của từng đoạn code. Khi bạn đã hiểu và 
ghi nhớ được những kiến thức đó - Hãy ngừng comment như vậy!*}
 + Mục đích vô hiệu hoá đoạn code
  Bản chất là trình biên dịch code sẽ bỏ qua những comment (không thực thi chúng). Vì vậy khi một đoạn code được comment lại thì đoạn code đó sẽ không chạy. Đôi khi 
bạn sẽ muốn tạm bỏ đi một đoạn code nào đó trong ứng dụng của bạn, đó chính là lúc bạn sử dụng comment.
  Ví dụ:
	var email = 'email@domain.com';
	var address = 'Hà Nội, Việt Nam';
	
	alert(email); // alert này sẽ chạy
	// alert(address); // alert này không chạy

THUẬT NGỮ BUILT-IN LÀ GÌ?
/*
Tóm tắt:
Giới thiệu một số hàm built-in:
	1. Alert
	2. Console
	3. Confirm
	4. Prompt
	5. Set timeout
	6. Set inerval
*/
console.log('Day la 1 dong log')
console.warn()
console.error()

confirm('Xac nhan ban du tuoi');

prompt('Xac nhan ban du tuoi');

setTimeout(function() {
	alert('Thong bao')
}, 1000)

setInterval(function() {
	console.log('Day la log' + Math.random())
}, 1000)

LÀM QUEN VỚI TOÁN TỬ
/**
Giới thiệu toán tử trong Javascript
1. Toán tử số học - Arithmetic
2. Toán tử gán - Assignment
3. Toán tử so sánh - Comparison
4. Toán tử logic - Logical
*/

1. Toán tử số học
/**
+   --> Cộng
-   --> Trừ
*   --> Nhân
**  --> Lũy thừa
/   --> Chia
%   --> Chia lấy số dư
++  --> Tăng 1 giá trị số
--  --> Giảm 1 giá trị số
*/
2. Toán tử gán
Toán tử 	Ví dụ 		Tương đương
 =		x = y		x = y
 +=		x += y		x = x + y
 -=		x -= y		x = x - y
 *= 		x *= y 		x = x * y
 /= 		x /= y		x = x / y
 **= 		x **= y		x = x ** y
 
Toán tử ++ và --
- Toán tử ++
 Giúp tăng giá trị của một biến mang giá trị lên 1. Có 2 cách để sử dụng toán tử ++ là
  1. Dùng làm hậu tố: variable++ (toán tử nằm sau biến)
  2. Dùng làm tiền tố: ++variable (toán tử nằm trước biến)
   #1 Sử dụng ++ làm hậu tố
   	var number = 1;
   	number++; // dùng làm hậu tố, ++ ở phía sau biến
   	console.log(number); // 2
   	
   	number++;
   	console.log(number); // 3
    Từ ví dụ trên ta thấy: Sau mỗi khi sử dụng toán tử ++, giá trị của biến number được tăng lên 1.
    	var number = 1;
    	console.log(number++); // 1
    	console.log(number); // 2
    	
    	console.log(number++); // 2
    	console.log(number); //3
    {*Toán tử ++ khi dùng là hậu tố sẽ tăng giá trị của biến lên 1 và trả về giá trị trước khi tăng*}
   #2 Sử dụng ++ làm tiền tố
   	var number = 1;
   	++number; // dùng làm tiền tố, ++ ở phía trước biến
   	console.log(number); // 2
   	
   	++number;
   	console.log(number); // 3
     Có vẻ trông không khác gì khi sử dụng làm hậu tố đúng không? Tuy nhiên khi xem xét kỹ hơn, chúng ta sẽ nhận ra điểm khác:
     	var number = 1;
     	
     	console.log(++number); // 2
     	console.log(number); //2
     	
     	console.log(++number); // 3
     	console.log(number); // 3
      {*Toán tử ++ khi là tiền tố sẽ tăng giá trị của biến lên 1 và trả về giá trị sau khi tăng*}
- Toán tử --
 Cách hoạt động tương tự như toán tử ++, điểm khác biệt là thay vì cộng thêm 1, thì toán từ -- sẽ trừ đi 1.
- Tổng kết
 + x++ tăng giá trị biến lên 1 và trả về giá trị trước khi tăng.
 + ++x tăng giá trị biến lên 1 và trả về giá trị sau khi tăng.
 + x-- giảm giá trị biến xuống 1 và trả về giá trị trước khi giảm.
 + --x giảm giá trị biến xuống 1 và trả về giá trị sau khi giảm.

Toán tử chuỗi - String operator
3. Toán tử so sánh
 ==    -->   Bằng
 !=    -->   Không bằng
 >     -->   Lớn hơn
 <     -->   Nhỏ hơn
 >=    -->   Lớn hơn hoặc bằng
 <=    -->   Nhỏ hơn hoặc bằng
 ===   -->   So sánh bằng tuyệt đối (value và data types)
 !==   -->   So sánh không bằng tuyệt đối (value và data types)
 
KIỂU DỮ LIỆU BOOLEAN - CÂU LỆNH ĐIỀU KIỆN IF
 ******************
 *   0            *
 *   false        *
 *   '' - ""      *   ==> Đều được hiểu là false trong kiểu dữ liệu
 *   undefoned   *       Boolean.
 *   NaN          *
 *   null         *
 ******************   
4. Toán tử logical
 - && - And
 - || - Or
 - ! - Not
 
KIỂU DỮ LIỆU
 1. Kiểu dữ liệu nguyên thủy - Primitive Data
  - Number
  - String
  - Boolean
  - Undefined
  - Null
  - Symbol
 2. Dữ liệu phức tạp - Complex Data
  - Function
  - Object
  
TRUTHY VÀ FALSY LÀ GÌ?
 1. Truthy - to bool is true
  Bất cứ giá trị nào trong Javascript khi chuyển đổi sang kiểu dữ liệu Boolean mà có giá trị true thì người ta gọi giá trị đó là Truthy.
  	console.log(Boolean(1)); // true
  	console.log(Boolean(["BMW"])); // true
  	console.log(Boolean({ name: "Miu" })); // true
  	
  	console.log(!! "hi"); // true
  {*!! là gì? Đơn giản thôi. Toán tử ! là toán tử not (phủ định) nên !! là 2 lần phủ định, mà 2 lần phủ định lại trở thành "khẳng định". Trong Javascript thì đây là một "tip" để convert (chuyển đổi) mọi kiểu dữ liệu khác sang Boolean.*}
  	console.log(!!1); // true
  	console.log(!!"dev"); // true
  	console.log(!!["Mercedes"]); // true
  Thêm !! phía trước các giá trị truthy sẽ luôn trả về true.
 2. Falsy - to bool is false
  Bất cứ giá trị nào trong Javascript khi chuyển đổi sang kiểu dữ liệu boolean mà có giá trị false thì ta gọi giá trị đó là Falsy.
  	console.log(!!false); // false
	console.log(!!0); // false
	console.log(!!''); // false
	console.log(!!null); // false
	console.log(!!undefined); // false
	console.log(!!NaN); // false
 3. Chú ý
  Ngoài 6 giá trị đã đề cập tơi ở phần Falsy thì toàn bộ các giá trị khác đều là Truthy, kể cả những giá trị sau:
   +) "0" (một chuỗi chứa số không)
   +) " " (một chuỗi chứa dấu cách)
   +) "false" (một chuỗi chứa từ khóa false)
   +) [] (một array trống)
   +) {} (một object trống)
   +) function() {} (một hàm "trống")
   {*Một số người chuyển từ ngôn ngữ khác sang rất có thể sẽ bị nhầm [] (mảng "rỗng") là falsy, bởi vì trong ngôn ngữ họ đã học trước đó [] là falsy*}
   	var cars = [] // DÙ là mảng "rỗng" vẫn là truthy
   	
   	if (!cars) {
   		// Họ sẽ thắc mắc: "Tại sao lại không lọt vào đây?"
   	}
    Vì [] là truthy nên !cars sẽ trả về false. Câu lệnh if sẽ nhận được kết quả của mệnh đề so sánh là false, vì vậy đoạn mã trong if trên sẽ không được lọt vào.
 4. Ngoại lệ? - document.all
  Trong Javascript (phía trình duyêt) sẽ có sẵn một đối tượng document, và khi bản thử !!document.all sẽ trả về false. Chẳng lẽ document.all cũng là falsy hay sao?
  document.all là một ngoại lệ chính thức duy nhất theo đặc tả ECMA (phiên bản 5). Đặc tả này mô tả toàn bộ các object khi chuyển sang boolean sẽ là true. Tuy nhiên, document.all là một ngoại lệ.
  Cụ thể như sau:
   +) document.all chuyển sang boolean sẽ là false
   +) document.all khi là toán hạng của toán tử so sánh === hoặc !== sẽ là undefined
   +) Khi typeof document.all sẽ trả về "undefined"
   {*ECMA là đặc tả chi tiết kỹ thuật mà các ngôn ngữ theo đặc tả này phải tuân theo. Javascript là một ngôn ngữ tuân thủ đặc tả kỹ thuật ECMA.*}
   
HÀM (FUNCTION)
1. Function
 - Một khối mã 
 - Làm một việc cụ thể
2. Loại hàm
 - Built-in
 - Tự định nghĩa
3. Tính chất
 - Không thực thi khi định nghĩa
 - Sẽ thực thi khi được gọi
 - Có thể nhận tham số
 - Có thể trả về 1 giá trị
4. Tạo hàm đầu tiên

THAM SỐ TRONG HÀM
1. Tham số?
 - Định nghĩa?
 - Kiểu dữ liệu?
 - Tính private?
 - Một tham số
 - Nhiều tham số
2. Truyền tham số
 - Một tham số
 - Nhiều tham số
3. Agruments?
 - Đối tượng agruments
 - Giới thiệu vòng for of
 	/**
 	* Chương trình thực hiện việc ghi ra các Log trên cùng 1 dòng
 	* và cách nhau bởi dấu "-"
 	*/
 	function writeLog() {
 		var myString = "";
 		for (var param of arguments) {
 			myString += '${param} -';
 			
 		}
 		console.log(myString);
 	}
 	writeLog("Log 1", "Log 2", "Log 3");

RETURN TRONG FUNCTION
	
	var isConfirm = confirm("Message?");
	
	console.log(isConfirm);
	
	function sum(a, b) {
		return a + b;
	}
	var result = sum(2, 8);
	console.log(result);
Trong 1 hàm nếu ko có return thì mặc định sẽ trả về undefined.

Một số điều cần biết về function
- Khi function đặt trùng tên?
 Function khai báo sau cùng sẽ được gọi đến.
- Khai báo biến trong hàm?
 Khi khai báo biến trong hàm, thì phạm vi sử dụng của biến đó sẽ chỉ ở trong function đã được khai báo.
- Định nghĩa hàm trong hàm?
 Tương tự như khi khai báo biến trong hàm, định nghĩa hàm trong hàm thì hàm con được khai báo trong hàm cha cũng sẽ chỉ có phạm vi sử dụng trong hàm cha.
 
Các loại function
1. Declaration function
	function showMessage() {
		console.log("Declaration function");
	}
2. Expression function
	var showMessage2 = function() {
		console.log("Expression function");
	}
3. Arrow function

CHUỖI TRONG JAVASCRIPT
1. Tạo chuỗi
 - Các cách tạo chuỗi: 2 cách
  +) Cách 1: var fullName = "dev";
  +) Cách 2: var fullName = new String("dev");
 - Nên dùng cách nào? Lý do?
  Cách 1 --> Ngắn gọn, khởi tạo nhanh, và trả về đúng kiểu chuỗi
 - Kiểm tra data type
  +) Cách 1: data type --> string
  +) Cách 2: data type --> Object
2. Một số case sử dụng backslash (\)
3. Xem độ dài chuỗi
4. Chú ý độ dài khi viết Code
  Nên viết số ký tự trên 1 dòng là khoảng 80 ký tự, nếu nhiều hơn thì nên xuống dòng.
5. Template  string E6
	var firstName = "DEV";
	var lastName = "UBUNTU";
	console.log(`Toi la: ${firstName} ${lastName}`);

OBJECT IN JAVASCRIPT
Math Object
- Math.PI
	console.log(Math.PI); // PI = 3.14....
- Math.round()
	console.log(Math.round(1.3)); // 1
	console.log(Math.round(1.8)); // 2
	console.log(Math.round(1.5)); // 2
	console.log(Math.round(1.499999)); // 1
	//Làm tròn số thập phân thành số nguyên
- Math.abs()
	console.log(Math.abs(-5)); // 5
 	// Trả về giá trị tuyệt đối của một số
- Math.ceil()
	console.log(Math.ceil(4.000001)); // 5
	//Làm tròn trên
- Math.floor()
	console.log(Math.floor(4.999999)); // 4
	//Làm tròn dưới
- Math.random()
	console.log(Math.random()); // Trả về số thập phân ngẫu nhiên nhỏ hơn 1
	// Example
	var random = Math.floor(Math.random() * 100);
	if (random =< 5) {
		console.log("Success");
	} else {
		console.log("fail");
	} 
- Math.min()
	console.log(Math.min(-100, 1, 90, 50, 40)); // -100
- Math.max()
	console.log(Math.max(-100, 1, 90, 50, 40)); // 90

CÂU LỆNH RẼ NHÁNH - IF ELSE

	var date = 2;
	if (date === 2) {
		cosole.log("Hom nay la thu 2");
	} else if (date === 3) {
		cosole.log("Hom nay la thu 3");
	} else if (date === 4) {
		cosole.log("Hom nay la thu 4");
	} else {
		cosole.log("Unknow");
	}

	//Kết quả: Hom nay la thu 2

CÂU LỆNH RẼ NHÁNH - Switch
	
	var date = 2;
	
	switch(date) {
		case 2:
			console.log("Monday");
			break;
		case 3:
			console.log("Tuesday");
			break;
		case 4:
			console.log("Wednesday");
			break;
		case 5:
			console.log("Thursday");
			break;
		case 6:
			console.log("Friday");
			break;
		case 7:
			console.log("Saturday");
			break;
		case 8:
			console.log(Sunday");
			break;
		default:
			console.log("Unknow");

	}

TOÁN TỬ 3 NGÔI - TERNARY OPERATOR
- example:
	var course = {
		name: "JavaScript",
		coin: 250
	}

	if (course.coin > 0) {
		console.log(`${course.coin} Coins`);
	} else {
		console.log("Free");
	}

	//Ternary operator
	var result = course.coin > 0 ? `${course.coin} Coins` : "Free";
	console.log(result);

VÒNG LẶP - LOOP
1. for - Lặp với điều kiện đúng
	for (var i = 1; i <= 1000; i++) {
		console.log(i);
	}
//For Loop
	var myArray = [
		"Javascript";
		"PHP";
		"Java";
		"Dart"
	];
	var arraylength = myArray.length;
	for (var i = 0; i < arrayLength; i++) {
		console.log(myArray[i]);
	}
	/**
	* Tính tổng giá trị đơn hàng
	* Ở bài này, chúng ta sẽ viết chương trình để tính tổng giá trị của 1 đơn hàng.
	* Cho trước mảng orders là danh sách chứa các khóa học, các mặt hàng này được thể hiện dưới dạng object và đều có 1 key là price để thể hiện giá trị của mặt hàng đó.
	* Bạn hãy hoàn thành hàm getTotal để tính được tổng giá trị của đơn hàng.
	*/
	var orders = [
    	{
        	name: 'Khóa học HTML - CSS Pro',
        	price: 3000000
    	},
    	{
        	name: 'Khóa học Javascript Pro',
        	price: 2500000
    	},
    	{
        	name: 'Khóa học React Pro',
        	price: 3200000
    	}
	]
	function getTotal(orders) {
    	var total = 0;
    	var ordersLength = orders.length;
    	for (var i = 0; i < ordersLength; i++) {
        	total += orders[i].price;
    	}
    	return total;
	}
	// Expected results:
	getTotal(orders); // Output: 8700000

2. for/in - Lặp qua key của đối tượng
	var myInfo = {
		name: "Leonard Nguyen";
		age: 18;
		address: "Ha Noi, VN"
	}
	for (var key in myInfo) {
		console.log(myInfo[key]);
	}

	var myLanguages = [
		"Javascript";
		"PHP";
		"Ruby";
		"Java"
	]
	for(var key in myLanguages) {
		console.log(key); //Ouput: 0 1 2 3
	}

	var languages = "Javascript";
	for (var key in languages) {
		console.log(languages[key]); //Output: J a v a s c r i p t 
	}

	/**
	* Bài tập sử dụng for...in
	*/
	function run(object) {
    	const arr=[];
    	for (var key in object) {
        	arr.push("Thuộc tính " + key + " có giá trị " + object[key]);
    	};
    	return arr;
	}
	console.log(run({ name: 'Nguyen Van A', age: 16 }));
	// Expected results:
	// Output:
	// [
	//     "Thuộc tính name có giá trị Nguyen Van A",
	//     "Thuộc tính age có giá trị 16"
	// ]
3. for/of - Lặp qua value của đối tượng
- Lấy ra từng phần tử của mảng or từng chữ cái của mỗi chuỗi.
	var myLanguages = [
		"Javascript";
		"PHP";
		"Ruby";
		"Java"
	]
	for (var value of myLanguages) {
		console.log(value);
	}
	// Expected results:
	// Javascript
	// PHP
	// Ruby
	// Java
- Đối với Object:
	var myInfo = {
		name: "Leonard Nguyen";
		age: 18;
		address: "Ha Noi, VN"
	};
	for (var value of Object.keys(myInfo)) {
		console.log(value);
	}
	// Expected results:
	// name
	// age
	// address
4. while - Lặp khi điều kiện đúng
	var i = 0;
	while(i < 1000) {
		i++;
		console.log(i);
	}

	var myLanguages = [
		"Javascript";
		"PHP";
		"Ruby";
		"Java"
	]
	var i = 0;
	var arrayLength = myLanguages.length;
	while (i < arrayLength) {
		console.log(myLanguages[i]);
		i++;
	}
5. do/while - Lặp ít nhất 1 lần, sau đó lặp khi điều kiện đúng
	/**
	* In ra dãy số tăng dần trong {1;10} 
	*/
	var i = 0;
	do {
		i++;
		console.log(i);
	} while(i < 10);
6. Break and Continue in Loop
	/**
	* In ra dãy số tăng dần từ 1 đến 5
	*/
	for (var i = 0; i < 10; i++) {
		console.log(i);
		if (i >= 5) {
			break;
		}
	}

	/**
	* In ra tất cả các số chẵn
	*/
	for (var i = 0; i < 10; i++) {
		if (i % 2 !== 0) {
			continue;
		}

		console.log(i);
	}
7. Nested Loop
	/**
	*
	*/
	var myArray = [
		[1,2],
		[3,4],
		[5,6]
	]

	for (var i = 0; i < myArray.length; i++) {
		for (var j = 0; j< myArray[i].length; j++) {
			console.log(myArray[i][j]);
		}
	}

	/**
	* In ra dãy số giảm dần từ 100 đến 1
	*/
	for (var i = 100; i >= 0; i--) {
		console.log(i);
	}
8. Đệ quy
 - Xác định điểm dừng.
 - Logic handle => Tạo ra điểm dừng

	/**
	* Viết ứng dụng countDown
	*/
	function countDown(num) {
		Fi (num > 0) {
			console.log(num);
			return countDown(num - 1);
		}
		return num;
	}

	countDown(3);

	function loop(start, end, cb) {
		in (start <=  end) {
			cb(start);
			return loop(start + 1, end, cb);
		}
	}

	var array = [
		"Javacript",
		"PHP",
		"Dart"
	];

	loop(0, array.length - 1, function(index) {
		console.log("index: ", index);
	})

	/**
	* Bài toán giai thừa
	*/

	function giaiThua(number) {
		if(number > 0) {
			return number * giaithua(number - 1);
		}
		return 1;
	}

ARRAY METHODS
	var courses = [
		{
			id: 1;
			name: "Javascript";
			coin: 250
		},
		{
			id: 2;
			name: "HTML, CSS";
			coin: 0
		},
		{
			id: 3;
			name: "Ruby";
			coin: 0
		},
		{
			id: 4;
			name: "PHP";
			coin: 400
		},
		{
			id: 5;
			name: "ReactJS";
			coin: 500
		}
	];
1. forEach()
 - Duyệt và trả về từng phần tử của mảng.
	courses.forEach(function(course, index) {
		console.log(index, course);
	})
2. every()
 - Kiểm tra tất cả các phần tử của mảng phải thoả mãn điều kiện cho trước.
	// Kiểm tra xem tất cả các khoá học trong mảng có phải là miễn phí không.
	var isFree = courses.every(function(course, index) {
		return course.coin === 0;
	})
	console.log(isFree); // false
3. some()
 - Kiểm tra một phần tử trong mảng thoả mãn điều kiện cho trước
	var isFree = courses.some(function(course, index) {
		return course.coin === 0;
	})
	console.log(isFree); // true
4. find()
 - Tìm kiếm phần tử trong mảng thoả mãn điều kiện cho trước, nếu có, trả về 1 phần tử duy nhất thoả mãn, nếu không có, trả về undefined
	var course = courses.find(function(course, index) {
		return course.name === "Ruby";
	})
	console.log(course);
5. filter()
 - Tìm kiếm phần tử trong mảng, trả về một danh sách các phần tử thoả mãn điều kiện.
	var listCourses = courses.filter(function(course, index) {
		return course.name === "Ruby";
	})
	console.log(course);

	/**
	* Tạo hàm getMostFavoriteSport có 1 tham số truyền vào,
	* trả về các môn thể thao có điểm số yêu thích lớn hơn 5.
	*/
	const sports = [
    	{
        	name: 'Bóng rổ',
        	like: 6
    	},
    	{
        	name: 'Bơi lội',
        	like: 5
    	},
    	{
        	name: 'Bóng đá',
        	like: 10
    	},
	]

	function getMostFavoriteSport(sports){
    	return sports.filter(num => num >5);
	}  
	// Kỳ vọng
	console.log(getMostFavoriteSport(sports)) 
	// Output: [{ name: 'Bóng rổ, like: 6 }, { name: 'Bóng đá, like: 10 }]
6. map()
7. reduce()

	